= DRAKE -- Distributed Rake

A branch of Rake supporting parallel task execution.

== Synopsis

Run up to three tasks in parallel:

  % drake -j3

or equivalently,

  % drake --threads 3

== Installation

  % gem install drake

== Notes

=== Compatibility

Drake is 100% compatible with Rake.  The code path for
<tt>--threads=1</tt> is effectively identical to that of Rake's.
Drake passes all of Rake's unit tests, with any number of threads from
1 to 1000 (that's the most I tested).

=== Dependencies

In a given Rakefile, it is possible (even likely) that the
dependency tree has not been properly defined.  Consider

   task :a => [:x, :y, :z]

With single-threaded Rake, _x_,_y_,_z_ will be invoked <em>in that
order</em> before _a_ is invoked (assuming there are no other rules
involving these tasks).  However with <code>drake -jN</code> (for +N+
> 1), one should not expect any particular order of execution.  Since
there is no dependency specified between _x_,_y_,_z_ above, Drake is
free to run them in any order.

If you wish _x_,_y_,_z_ to be invoked sequentially, then write

   task :a => seq[:x, :y, :z]

This is shorthand for

   task :a => :z
   task :z => :y
   task :y => :x

Upon invoking _a_, the above rules say: "Can't do _a_ until _z_ is
complete; can't do _z_ until _y_ is complete; can't do _y_ until _x_
is complete; therefore do _x_."  In this fashion the sequence
_x_,_y_,_z_ is enforced.

The problem of insufficient dependencies plagues Makefiles as well.
Package maintainers affectionately call it "not j-safe."

=== MultiTask

When more than one thread is given, +multitask+ behaves just like
+task+.  Those tasks which may properly be run in parallel will be run
in parallel; those which cannot, will not.  It is not the user's job
to decide.  In other words, for <tt>-jN</tt> (+N+ > 1), +multitask+ is
an alias of +task+.

For <tt>-j1</tt> (default), +multitask+ behaves as the original.

=== Task#invoke inside Task#invoke

Parallelizing code means surrendering control over the
micro-management of its execution.  Manually invoking tasks inside
other tasks is rather contrary to this notion, throwing a monkey
wrench into the system.  An exception will be raised when this is
attempted in multi-threaded mode.

=== Migrating to -j

First of all, do you want to bother with <tt>-j</tt>?  If you are
satisfied with your build time, then there is really no reason to use
it.

If on the other hand your build takes twenty minutes to complete, you
may be interested in investing some time getting the full dependency
tree correct in order to take advantage of multiple CPUs or cores.

Though there is no way for Drake to fathom what <em>you</em> mean by a
correct dependency, there is a tool available which helps you get
closer to saying what you mean.

  % drake --rand[=SEED]

This will randomize the order of sibling prerequisites for each task.
When given the optional SEED string, it will call
<tt>srand(SEED.hash)</tt> to produce the same permutation each time
(String#hash produces the integer which is the seed).  The randomize
option also disables +multitask+, making it a regular unthreaded
+task+.

Though this option may produce an error due to an unspecified
dependency, at least it will be an error which is exactly the same on
each run (with SEED).  In addition, you'll have the major debugging
advantage of using a single thread.

This option will also work in multi-threaded mode.  After all, once
<tt>-jN</tt> is running smoothly there is <em>still</em> no guarantee
that you have it right.  However with each successful execution of
<tt>drake -jN --rand</tt>, the probability of correctness approaches 1
(though asymptotically so).

(The only way to <em>prove</em> correctness is to test <em>all</em>
such permutations, which for any non-trivial project would be
prohibitively large, especially those which meaningfully benefit from
<tt>-j</tt>.)

== Links

* Download: http://rubyforge.org/frs/?group_id=6530
* Documentation: http://drake.rubyforge.org
* Rubyforge home: http://rubyforge.org/projects/drake
* Repository: http://github.com/quix/rake

== Author

* James M. Lawrence <quixoticsycophant@gmail.com>

== License

Copyright (c) 2003, 2004 Jim Weirich

Copyright (c) 2008 James M. Lawrence

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

= RAKE -- Ruby Make -- <em>master branch</em>

Supporting Rake version: 0.8.2

This package contains Rake, a simple ruby build program with
capabilities similar to make.

Rake has the following features:

* Rakefiles (rake's version of Makefiles) are completely defined in
  standard Ruby syntax.  No XML files to edit.  No quirky Makefile
  syntax to worry about (is that a tab or a space?)

* Users can specify tasks with prerequisites.

* Rake supports rule patterns to synthesize implicit tasks.

*  Flexible FileLists that act like arrays but know about manipulating
   file names and paths.

* A library of prepackaged tasks to make building rakefiles easier.

== Download

The latest version of rake can be found at

* http://rubyforge.org/project/showfiles.php?group_id=50

== Source Repository

Rake is currently hosted at github. The github web page is
http://github.com/jimweirich/rake. The public git clone URL is

* git://github.com/jimweirich/rake.git

== Installation

=== Normal Installation

You can install rake with the following command.

  % ruby install.rb

from its distribution directory.

=== GEM Installation

Download and install  rake with the following.

   gem install --remote rake

=== Running the Rake Test Suite

If you wish to run the unit and functional tests that come with Rake:

* Install the 'session' gem in order to run the functional tests. adf
  asdf asdf
* CD into the top project directory of rake.
* Type one of the following:

     rake                  # If you have a version of rake installed
     ruby -Ilib bin/rake   # If you do not have a version of rake installed.

== Online Resources

== Rake References

* Rake Documentation Home: http://docs.rubyrake.org
* Rake Project Page: http://rubyforge.org/projects/rake
* Rake API Documents: http://rake.rubyforge.org
* Rake Source Code Repo:  http://github.com/jimweirich/rake
* Rake Git Repo Clone URL: git://github.com/jimweirich/rake.git

== Presentations and Articles about Rake

* Jim Weirich's 2003 RubyConf presentation: http://onestepback.org/articles/buildingwithrake/
* Martin Fowler's article on Rake: http://martinfowler.com/articles/rake.html

=== Road Map

* If you want to see how to invoke rake to build your projects, read on.
* If you want to see the format of a Rakefile, see
  doc/rakefile.rdoc[http://rake.rubyforge.org/files/doc/rakefile_rdoc.html].
* If you want to see the original announcement of rake, see
  doc/rational.rdoc[http://rake.rubyforge.org/files/doc/rational_rdoc.html].
* If you want to see a glossary of terms, see
  doc/glossary.rdoc[http://rake.rubyforge.org/files/doc/glossary_rdoc.html].

== Simple Example

Once installed, you can run rake as follows ...

  % rake [options ...]  [VAR=VALUE ...]  [tasks...]

Type "rake --help" for an up-to-date option summary.

Invoking <tt>rake</tt> without any options or targets causes rake to
look for a rakefile and invoke the default task in that rakefile.

For example, given a simple rakefile like this ...

  task :default => [:test]

  task :test do
    ruby "test/unittest.rb"
  end

The command 

  $ rake

will invoke the +default+ task.  As +default+ satisfies its
prerequisites, the +test+ task will run the unit tests for the
package.

== Other Make Reinvisionings ...

Rake is a late entry in the make replacement field.  Here are links to
other projects with similar (and not so similar) goals.

* http://directory.fsf.org/bras.html -- Bras, one of earliest
  implementations of "make in a scripting language".
* http://www.a-a-p.org -- Make in Python
* http://www.aromatic.com/tools/jam.txt -- JAM, Java Automated Make
* http://ant.apache.org -- The Ant project
* http://ppt.perl.org/commands/make/index.html -- Make from the Perl
  Power Tools implementation.
* http://search.cpan.org/search?query=PerlBuildSystem -- The Perl Build System
* http://make.rubyforge.org -- Rant, another Ruby make tool.

== Credits

[<b>Ryan Dlugosz</b>] For the initial conversation that sparked Rake.

[<b>nobu.nokada@softhome.net</b>] For the initial patch for rule support.

[<b>Tilman Sauerbeck <tilman@code-monkey.de></b>] For the recursive rule patch.

== License

Rake is available under an MIT-style license.

:include: MIT-LICENSE

== Support

The Rake homepage is http://rake.rubyforge.org.  You can find the Rake
RubyForge page at http://rubyforge.org/projects/rake.

Feel free to submit commits or feature requests.  If you send a patch,
remember to update the corresponding unit tests.  If fact, I prefer
new feature to be submitted in the form of new unit tests.

For other information, feel free to ask on the ruby-talk mailing list
(which is mirrored to comp.lang.ruby) or contact
mailto:jim@weirichhouse.org.

----

= Usage

Rake is invoked from the command line using:

   % rake [<em>options</em> ...]  [<em>VAR</em>=<em>VALUE</em>]  [<em>targets</em> ...]

Options are:

[<tt><em>name</em>=<em>value</em></tt>]
    Set the environment variable <em>name</em> to <em>value</em>
    during the execution of the <b>rake</b> command.  You can access
    the value by using ENV['<em>name</em>'].  

[<tt>--classic-namespace</tt> (-n)]
    Import the Task, FileTask, and FileCreateTask into the top-level
    scope to be compatible with older versions of Rake.  Alternatively
    you can include the line <code>require
    'rake/classic_namespace'</code> in your Rakefile to get the
    classic behavior.

[<tt>--describe</tt> _pattern_ (-D)]
    Describe the tasks (matching optional PATTERN), then exit.

[<tt>--dry-run</tt> (-n)]
    Do a dry run.  Print the tasks invoked and executed, but do not
    actually execute any of the actions.

[<tt>--execute</tt> _code_ (-e)]
    Execute some Ruby code and exit.

[<tt>--execute-print</tt> _code_ (-p)]
    Execute some Ruby code, print the result, and exit.

[<tt>--execute-continue</tt> _code_ (-p)]
    Execute some Ruby code, then continue with normal task processing.

[<tt>--help</tt>  (-H)]
    Display some help text and exit.

[<tt>--libdir</tt> _directory_  (-I)]
    Add _directory_ to the list of directories searched for require.

[<tt>--nosearch</tt>  (-N)]
    Do not search for a Rakefile in parent directories.

[<tt>--prereqs</tt>  (-P)]
    Display a list of all tasks and their immediate prerequisites.

[<tt>--quiet</tt> (-q)]
    Do not echo commands from FileUtils.

[<tt>--rakefile</tt> _filename_ (-f)]
    Use _filename_ as the name of the rakefile. The default rakefile
    names are +rakefile+ and +Rakefile+ (with +rakefile+ taking
    precedence). If the rakefile is not found in the current
    directory, +rake+ will search parent directories for a match. The
    directory where the Rakefile is found will become the current
    directory for the actions executed in the Rakefile.

[<tt>--rakelibdir</tt> _rakelibdir_ (-R)]
    Auto-import any .rake files in RAKELIBDIR. (default is 'rakelib')

[<tt>--require</tt> _name_ (-r)]
    Require _name_ before executing the Rakefile.

[<tt>--rules</tt>]
    Trace the rules resolution.

[<tt>--silent (-s)]
    Like --quiet, but also suppresses the 'in directory' announcement.

[<tt>--system</tt> (-g)]
    Use the system wide (global) rakefiles. The project Rakefile is
    ignored. By default, the system wide rakefiles are used only if no
    project Rakefile is found. On Unix-like system, the system wide
    rake files are located in $HOME/.rake. On a windows system they
    are stored in $APPDATA/Rake.

[<tt>--no-system</tt> (-G)]
    Use the project level Rakefile, ignoring the system-wide (global)
    rakefiles.

[<tt>--tasks</tt> (-T)]
    Display a list of the major tasks and their comments.  Comments
    are defined using the "desc" command.

[<tt>--trace</tt> (-t)]
    Turn on invoke/execute tracing. Also enable full backtrace on
    errors.

[<tt>--usage</tt> (-h)]
    Display a usage message and exit.

[<tt>--verbose</tt> (-v)]
    Echo the Sys commands to standard output.

[<tt>--version</tt> (-V)]
    Display the program version and exit.

In addition, any command line option of the form
<em>VAR</em>=<em>VALUE</em> will be added to the environment hash
<tt>ENV</tt> and may be tested in the Rakefile.

---

= Rakefile Format

See doc/rakefile.rdoc[http://rake.rubyforge.org/files/doc/rakefile_rdoc.html]
for details on the Rakefile format.

---

= Other stuff

Author::   Jim Weirich <jim@weirichhouse.org>
Requires:: Ruby 1.8.0 or later
License::  Copyright 2003, 2004 by Jim Weirich.
           Released under an MIT-style license.  See the LICENSE file
           included in the distribution.

== Warranty

This software is provided "as is" and without any express or
implied warranties, including, without limitation, the implied
warranties of merchantibility and fitness for a particular
purpose.
