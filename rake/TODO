= Rake Project -- To Do List

Send suggestions for this list to mailto:jweirich@one.net.

=== To Do
* Define a set of default rules that work in the absense of any Rakefile
* What about cyclic dependencies?
* Java support utilities
* Installation support utilities
  * Check out installpkg.rb
* Autogenerate Dependencies
* Rules should apply to existing tasks if no actions are defined.

* The '--main' option shouldn't be given to RDoc by default, and
  RDocTask#main certainly shouldn't default to README.
* It's unclear how to use RDocTask#options.  The way it's rendered into the
  rdoc command is buggy; items should be space-separated.
* When executing the 'rdoc' task repeatedly, RDoc complains that the output
  directory doesn't look like an RDoc directory, so it fails.  This is
  because on execution, the directory is cleared but not removed.
* :rerdoc task is buggy (s/clean/clobber/).
* 'title' attribute desired.

PackageTask:
* How can I specify what directory to use as the base of packaging
  operations?  When creating a package for project 'foo', the Rakefile is in
  directory foo, but I want to include directory 'foo' in the tarball, if you
  know what I mean.  The documentation says nothing about default behaviour
  in this regard.
* My first use of it was a bit bizarre.  Here's the code:
    package_files = FileList['**/*']
    package_files.exclude! %r{\bCVS\b}
    Rake::PackageTask.new do |p|
      p.need_tar = true
      p.need_zip = true
      p.package_files.add(package_files)
    end
   It created a tarball pkg/-.tgz, and put all the files into pkg/-/.  I
   understand what's going on now, digging through the source.  Maybe error
   out if name is nil?
* Having PackageTask create implicit tasks is bad if you want to have
  :package_src, :package_bin, etc.
* #package_files is read-only.  You can't say p.package_files =
  FileList[...].  Strange.  Not bad, maybe, but strange.
* If version is nil, then package name (before .tgz) will end in "-".
  Undesirable.



FileList:
* Allow this style of initialisation:
      files = FileList.new do |fl| fl.add(...); fl.exclude(...); end
* Note that in the above code, fl.exclude is non-destructive.  I think that's
  a shame.  I guess I'm just used to ant.  It took me ages to work out why my
  FileList wasn't working 
* Also in the above code, perhaps #include as an alias for #add.  Ant again.
* Also wrt the above code, allow this: files = FileList[...] do |fl| ... end



General:
* Rake's RDoc should have a title.
* The 'contrib' files should be cleaned up (see duplicate classes when
  they're included in RDoc) and rolled into main distribution.


=== Done

==== Version 0.2.7

<b>jw - 19/Oct/03</b> :: Display dependencies
<b>jw - 19/Oct/03</b> :: Display tasks (with optional comments)

==== Version 0.2.1

<b>jw - 21/Mar/03</b> :: Add an option to dump the dependencies.
<b>jw - 21/Mar/03</b> :: Fine tuned Task timestamps so they mix with FileTask better.

==== Version 0.2.0

<b>jw - 19/Mar/03</b> :: Provide a rake version of some file tools (for verbose control)
<b>jw - 19/Mar/03</b> :: Handle rakefile and -f options
<b>jw - 17/Mar/03</b> :: Support implicit file tasks
<b>jw - 17/Mar/03</b> :: Add rule based targets
